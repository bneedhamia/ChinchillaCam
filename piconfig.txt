Configuration of my Raspberry Pi 3 for Python, Wifi, Camera development
Brad Needham

Install the Camera Module V2 hardware:
See https://www.raspberrypi.org/products/camera-module-v2/
and https://www.raspberrypi.org/learning/getting-started-with-picamera/worksheet/
Using the two screws that came with the Pi Enclosure, fasten the camera to the enclosure.
Pull up gently on the Pi board camera connector (a thin rectangular connector).
Insert the camera ribbon cable into the camera connector - pay attention to the direction
shown in the pictures on the getting-started page.
Gently push the connector down. This clamps the ribbon cable.
Close the Pi Enclosure, arranging the ribbon cable so it isn't pinched.

Install Raspbian on a 16GB micro SD card:
  Plug the SD card into your laptop. This step usually requires an adapter.
  Browse to https://www.raspberrypi.org/downloads/
  Click on the link for Raspberry Pi Imager for your host machine (e.g., Windows).
  Open (run) the downloaded installer, e.g., imager_1.4.exe
  Run the installed Raspberry Pi Imager.
  Click Choose OS, and select Raspberry Pi OS 32-bit...recommended.
  Click Choose SD Card, and select your plugged in SD card.
  Click Write, and Yes. A Raspberry Pi installer will be copied to the SD card.

If the Raspberry Pi Imager formatting fails, format the card with SD Formatter from the SD Association.
Windows normal formatter will not work:
  Browse to https://www.sdcard.org/downloads/formatter/
  Click on the SD Memory Card Formatter for your host machine (e.g., Windows).
  Run that formatter, using Quick Format and if available, Size Adjustment.
  Try the Raspberry Pi Imager again.

Once the imager succeeds, remove the SD Card and plug the Micro SD card into the Raspberry Pi.
Connect the Pi to an HDMI monitor, keyboard, and mouse.
Connect the Pi to power.
Follow the screen instructions to select a set of options:
My choices:
  Country: United States
  Language: American English
  Timezone: Los Angeles
  Use English Language
  Use US Keyboard
When prompted, set the pi account password to something you choose, to avoid default-password attacks.
Continue answering questions to...
  Remove the screen black border.
  Select a wireless network and enter its existing password.
  Update the OS and applications (this step will take a few minutes).

Secure your Pi against default-password attacks:
Choose a password for root.
$ sudo passwd
Enter your chosen root password (twice).

Choose a unique Host name for this pi so it won't be confused with others on your network.
menu / preferences / Raspberry Pi Configuration...
Select the System tab
 Hostname: Enter your chosen hostname
 Click OK
 Agree to reboot.

Upgrade to the latest versions of software:
$ sudo apt-get update
$ sudo apt-get upgrade (this will take a few minutes)
If the upgrade stops with a : prompt, press the space key until it prompts with "press q to quit",
then press the q key. The upgrade will then continue.

Enable SSH so you can remotely access the Pi if you wish:
menu / preferences / Raspberry Pi Configuration...
Choose the Interfaces tab.
Enable SSH (click on the button labeled "Enabled").
Click OK.

Follow the instructions at https://www.raspberrypi.org/learning/getting-started-with-picamera/worksheet/ to install and test the camera.

menu / preferences / Raspberry Pi Configuration...
Select the Interfaces tab.
Enable the camera (click the text "enabled" to turn on that option).
Click OK
Agree to reboot.

Set up git and clone the ChinchillaCam repository:
$ git config --global user.name "your name"    (use your first and last name)
$ git config --global user.email yourEmail@wherever  (use your email address)
$ cd Documents
$ git clone https://github.com/bneedhamia/ChinchillaCam.git

Install OpenCV for Python:
Note: the following instructions for installing OpenCV for Python are pretty much a
copy of the intructions at 
http://www.pyimagesearch.com/2016/04/18/install-guide-raspberry-pi-3-raspbian-jessie-opencv-3/
but with the virtual environment management omitted. I skipped the virtual environment manager
because it gave me problems and because I plan to run only one python app on this Pi, so I don't
expect a virtual environment manager will provide any benefit to me.

$ sudo apt-get install build-essential cmake pkg-config
$ sudo apt-get install libjpeg-dev libtiff5-dev libjasper-dev libpng12-dev

============ STOPPED HERE: Should we install (have we already?) python 3 instead of 2.x?
$ sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev
$ sudo apt-get install libxvidcore-dev libx264-dev
$ sudo apt-get install libgtk2.0-dev
$ sudo apt-get install libatlas-base-dev gfortran
$ sudo apt-get install python2.7-dev python3-dev

$ cd ~
$ wget -O opencv.zip https://github.com/Itseez/opencv/archive/3.1.0.zip
$ unzip opencv.zip
$ wget -O opencv_contrib.zip https://github.com/Itseez/opencv_contrib/archive/3.1.0.zip
$ unzip opencv_contrib.zip

$ wget https://bootstrap.pypa.io/get-pip.py
$ sudo python get-pip.py

$ pip install numpy

$ cd ~/opencv-3.1.0/
$ mkdir build
$ cd build
$ cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D INSTALL_PYTHON_EXAMPLES=ON \
 -D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib-3.1.0/modules -D BUILD_EXAMPLES=ON ..

I had problems with make -j4 hanging the Pi, so I just do a make and suffer the several hour time delay.
The following commands takes several hours to complete:
$ make >make.out 2>&1&
$ tail -f make.out
Note: tail will not exit. Type ^C (Ctrl+C) when you see the output saying that it's finished.

$ sudo make install
$ sudo ldconfig

Test the OpenCV installation:
$ ls -l /usr/local/lib/python2.7/dist-packages
The resultant list should include cv2.so
If it doesn't, try
$ ls -l /usr/local/lib/python2.7/site-packages/

$ python
>>> import cv2
>>> cv2.__version__
It should print the OpenCV version number, such as '3.1.0'
>>>exit()

Clean up:
$ cd ~
$ rm -f opencv.zip opencv_contrib.zip
$ rm -rf opencv-3.1.0 opencv_contrib-3.1.0

Install the PiCamera & PiCamera Array Python libraries so Python can read camera frames into OpenCV:
$ pip install "picamera[array]"

